(load-file "word_count_test.clj")
(-> ["" "4" ""] (-> clojure.string/blank? (remove)))
(load-file "word_count_test.clj")
(first "abcdefg")
(rest "abcdefg")
(join \a "bcde")
(clojure.string/join \a "bcde")
(concat \a "bcde")
(concat [\a] "bcde")
(concat [\a] "")
(concat "abcde" [])
(concat ["abcde"] [])
(clojure.string/join [])
(concat "" ["abcde"])
(concat "abd" ["abcde"])
(concat (join [\a \b \c \d]) ["efgh"])
(concat (clojure.string/join [\a \b \c \d]) ["efgh"])
(concat [(clojure.string/join [\a \b \c \d])] ["efgh"])
(concat [(clojure.string/join [])] ["efgh"])
(let [[word & tail] (concat [(clojure.string/join [])] ["efgh"])] word)
(load-file "word_count_test.clj")
(load-file "word_count.clj")
(split-if-not alphanumeric? "abcde wepo")
(word-count/split-if-not alphanumeric? "abcde wepo")
(word-count/split-if-not word-count/alphanumeric? "abcde wepo")
(.toLowerCase \A)
(.toLowerCase (first "ABCDE"))
(load-file "word_count.clj")
(Character/toLowerCase (first "ABCDE"))
(word-count/split-if-not word-count/alphanumeric? "abcde wepo")
(.contains "abcdefghijklmnopq" (Character/toLowerCase \A))
(concat "abcdefghijklmnopq")
(join \a)
(clojure.string/join \a)
(clojure.string/join [\a])
(str \c)
(str (concat "abcdefghijklmnopq"))
(load-file "word_count.clj")
(word-count/split-if-not word-count/alphanumeric? "abcde wepo")
(word-count/alphanumeric? \a)
(word-count/alphanumeric? \$)
\null
\nil
(char "")
(first "")
(load-file "word_count.clj")
(ns word-count)
(word-count "abc abc abc")
(build-word alphanumeric? "abcabcabc" "")
(build-word alphanumeric? "abc abc abc" "")
(load-file "word_count.clj")
(build-word alphanumeric? "abc abc abc" "")
(split-if-not alphanumeric? "abc abc abc")
(load-file "word_count.clj")
(split-if-not alphanumeric? "abc abc abc")
(load-file "word_count.clj")
(split-if-not alphanumeric? "abc abc abc")
(word-count "abc abc abc")
(load-file "word_count.clj")
(word-count "abc abc abc")
(join (\a \b \c))
(clojure.string/join (\a \b \c))
(str [\a \b \c])
(str \a \b \c)
(str \a "bc")
(load-file "word_count.clj")
(word-count "abc abc abc")
(build-word alphanumeric? "abc abc abc" "")
(load-file "word_count.clj")
(build-word alphanumeric? "abc abc abc" "")
(word-count "abc abc abc")
(ns user)
(load-file "word_count_test.clj")
