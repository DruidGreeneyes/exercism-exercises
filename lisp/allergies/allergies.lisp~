(in-package #:cl-user)
(defpackage #:allergies
  (:use #:common-lisp)
  (:shadow #:list)
  (:export #:allergic-to-p #:list))

(in-package #:allergies)

(defparameter *allergies* (cl:list
                           (cons "cats" 128)
                           (cons "pollen" 64)
                           (cons "chocolate" 32)
                           (cons "tomatoes" 16)
                           (cons "strawberries" 8)
                           (cons "shellfish" 4)
                           (cons "peanuts" 2)
                           (cons "eggs" 1)))

(defun get-allergen (num)
  (car (member num *allergies* :key #'cdr :test #'>=)))
(defun get-num (allergen)
  (cdr (assoc allergen *allergies* :test #'string=)))


(defun allergic-to-p (num allergen)
  (>= num (get-num allergen)))

(defun list-old (num &optional acc)
  (if (= num 0) acc
      (let* ((alg (get-allergen num))
             (new-num (- num (cdr alg))))
        (pushnew (car alg) acc :test #'string=)
        (list new-num acc))))

(defun list (num)
  (when (> num 255) (list (- num 128)))
  (loop for alg in *allergies*
     with n = ))
